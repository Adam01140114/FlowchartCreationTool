# Debugging Mode Documentation

## üîç **Error Analysis Process:**

### **Step 1: Analyze the Error in output.html**
- Look at the console logs to see what's happening
- Identify what's working vs. what's not working
- Look for missing expected logs or unexpected behavior

### **Step 2: Understand Why generate.js is Generating the Error**
- Examine the generated code in output.html to see what generate.js actually produced
- Compare it with what I intended to generate
- Identify the root cause in generate.js logic

### **Step 3: Fix generate.js to Prevent the Error**
- Modify the generate.js code to produce the correct output.html
- Test the fix by regenerating and checking the new output.html

## üö® **Current Issue Analysis:**

### **Problem:** Numbered dropdown autofill not working for conditional dropdowns in any section

**Step 1 - Error in output.html:**
- Console shows: `üîß [SHOWTEXTBOX DEBUG] showTextboxLabels called with questionId: 2 count: 2` ‚ùå
- Console shows: `üîß [SHOWTEXTBOX DEBUG] Container found: null` ‚ùå
- Console shows: `üîß [SHOWTEXTBOX DEBUG] ‚ùå No container found, returning` ‚ùå
- **Expected:** Should be `questionId: 3` and find `labelContainer3` (since dropdown is now in section 3)

**Step 2 - Why generate.js is generating this error:**
- The autofill logic is hardcoded to use `questionId = '2'` for any dropdown starting with `how_many`
- But the `how_many_people_are_suing_with_you` dropdown is now in section 3 (question 3)
- The `showTextboxLabels` function is being called with the wrong question ID, so it can't find the correct container
- This needs to be a dynamic solution that works regardless of which section the dropdown is in

**Step 3 - How to fix generate.js:**
- Make the question ID detection dynamic by parsing the dropdown's `onchange` attribute
- Extract the question ID from `showTextboxLabels(3, this.value)` in the `onchange` attribute
- Use regex to match `showTextboxLabels\((\d+),` and extract the correct question ID
- Add fallback logic to scan for existing `labelContainer` elements if the regex fails
- This will work for any section (1, 2, 3, 4, etc.) without hardcoding

## üéØ **Debugging Best Practices:**

1. **Always check output.html first** - see what generate.js actually produced
2. **Compare expected vs. actual behavior** - look for missing logs or unexpected results
3. **Trace the execution flow** - understand which code paths are being taken
4. **Fix the root cause in generate.js** - don't just patch the symptoms
5. **Test the fix** - regenerate and verify the new output.html works correctly

## üìù **Common Issues:**

- **Logic in wrong pass**: Autofill logic in first pass but data in second pass
- **Missing conditions**: Logic not triggered because conditions aren't met
- **Scope issues**: Variables not accessible in callback functions
- **Timing issues**: Code running before elements are created
- **Duplicate logic**: Same logic in multiple places causing conflicts
